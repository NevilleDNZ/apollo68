#!/usr/bin/algol68g-full --script #
# -*- coding: utf-8 -*- #
PR no-warning PR

PR include "prelude/scalar_:=_real.a68" PR;
PR include "prelude/errata.a68" PR;
PR include "prelude/with_trace_and_with_debug.a68" PR;
PR include "prelude/exception.a68" PR;

CO REQUIRED BY prelude/matrix CO
# define the attributes of the scalar field being used #
    PR include "prelude/math_errata.a68" PR;
PR include "prelude/matrix.a68" PR;

CO Required by prelude/gaussian_elimination CO
# create "near min scal" as is scales better then small real #
SCAL near min scal = min real ** 0.99;
PR include "prelude/gaussian_elimination.a68" PR;

VEC x=(1,0,0), y=(0,1,0), z=(0,0,1); # row vector #

MAT i a  =( 2*x - 2*y -   z, #  = -2 #
            4*x +   y - 2*z, #  =  1 #
           -2*x +   y -   z),#  = -3 #

    ii a =(  x  + 2*y   - z, #  =  2 #
                  3*y   + z, #  =  4 #
           2*x  -   y   + z),#  =  2 #

    iii a=(2*x  +   y - 4*z, #  = -7 #
             x  -   y +   z, #  = -2 #
            -x  + 3*y - 2*z);#  =  6 #

VEC i b  =(-2, 1, 3), # notice that these are row vectors #
    ii b =( 2, 4, 2),
    iii b=(-7,-2, 6);

MODE SYSTEM = STRUCT(MAT a, VEC b); # i.e. Ax=b #

SYSTEM i   = (i a,   i b  ),
       ii  = (ii a,  ii b ),
       iii = (iii a, iii b);
[]SYSTEM system test cases = (i,ii,iii);

  CO # Actual solutions are: #
    i. x  =(-.50000000,1.00000000,-1.0000000)
    ii. x =(1.00000000,1.00000000,1.00000000)
    iii. x=(-1.0000000,3.00000000,2.00000000)
  END CO

[,]REAL a =(
	    (1.00, 0.00, 0.00,  0.00,  0.00,   0.00),
	    (1.00, 0.63, 0.39,  0.25,  0.16,   0.10),
	    (1.00, 1.26, 1.58,  1.98,  2.49,   3.13),
	    (1.00, 1.88, 3.55,  6.70, 12.62,  23.80),
	    (1.00, 2.51, 6.32, 15.88, 39.90, 100.28),
	    (1.00, 3.14, 9.87, 31.01, 97.41, 306.02)
);
[]REAL b = (-0.01, 0.61, 0.91, 0.99,   0.60,   0.02);

# define a convenient MATrix INVersion using Gaussian Elimination #
OP GEINV = (MAT a)MAT: gaussian elimination(a,IDENTITY UPB a);

# define a convenient MATrix INVersion using QR #
OP QRINV = (MAT a)MAT: a UNDER IDENTITY UPB a;

CO
printf(($"A:"gl$,REPR ii a));
printf(($68"-"l$));
printf(($"WP B:"gl$,REPR(gaussian elimination(ii a,T MAT(ii b))), $l$));
printf(($68"-"l$));
printf(($"WOP B:"gl$,REPR(gaussian elimination wo p(ii a,T MAT(ii b))), $l$));
printf(($68"-"l$));
print mat list(("a:",a, new line));
print mat list(("b:",a, new line));
print mat list(("WOP B:",ii b * GEINV T ii a, new line));
printf(($"WOP B:"gl$,REPR(ii b * GEWOPINV T ii a)));
printf(($68"-"l$));
MAT inv a = GEINV ii a;
print mat list(("mine inv a",inv a, new line));
print mat list(("IDENTITY: a * inv a:",ii a * inv a, new line));
print mat list(("ACTUAL: a:",ii a, new line, "inv a",INV ii a, new line));
CO
MAT inv a = GEINV a;
print mat list(("mine inv a",inv a, new line));
print mat list(("IDENTITY: a * inv a:",a * inv a, new line));
print mat list(("ACTUAL: a:",a, new line, "inv a",INV a, new line));
CO
printf(($"a \ b:"gl$,REPR(a UNDER b)));
printf(($"b / T a:"gl$,REPR(b / T a)));
# ans: a \ b:(  -0.0100,   1.6028,  -1.6132,   1.2455,  -0.4910,   0.0658) #
CO

PR include "postlude/exception.a68" PR;
PR include "postlude/scalar_=:_real.a68" PR

