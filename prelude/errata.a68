# -*- coding: utf-8 -*- #

#========================================================#
# Errata: A collections of OPerators, MODES and variables#
#     that are "kind of" implied by Algol68's definition #
#========================================================#

# Standard Diadic OPerator to initialise an object #
PRIO INIT = 1; # should be 0 like assignment #

INT extra = -5; # to remove or display additional decimal places in output #

COMMENT 
    #L# - MODE/type may also be prefixed with SHORT or LONG
    #l# - PROC/variable may also be prefixed with 'short' or 'long'
    #L# - MODE/type may also be prefixed with LONG for unicode
    #l# - PROC/variable may also be prefixed with 'long' for unicode
    #S# - Diadic OPerators concurrently involving LONG and SHORT
    #s# - Diadic+ PROCedure concurrently involving LONG and SHORT
    #WIDTHG# & #SHORTEN# widening operators
END COMMENT

FORMAT 
    #l# bits repr := $g$,
    #l# int repr := $g(-0)$,
    #l# real repr := $g(-#l# real width-extra, #l# real width-2+extra)$,
    #l# compl repr := $f(#l# real repr)"⊥"f(#l# real repr)$,
    #u# string repr := $""""g""""$,
    #u# char repr := $"'"g"'"$,
            unicode repr := $g$,
            bool repr := $c("Yes","No")$;
OP REPR = (BITS self)STRING: sprintf((bits repr, self));
# Note: this clashes with OP(INT)CHAR built in #
#OP REPR = (INT self)STRING: sprintf((int repr, self));#
OP REPR = (REAL self)STRING: sprintf((real repr, self));
OP REPR = (COMPL self)STRING: sprintf((compl repr, self));
OP REPR = (STRING self)STRING: sprintf((string repr, self));
OP REPR = (CHAR self)STRING: sprintf((char repr, self));
OP REPR = (BOOL self)STRING: sprintf((bool repr, self));

MODE UCHAR = STRING; # UTF8 or Unicode (so far...) #
MODE USTRING = [0]UCHAR;
OP US = (STRING s)USTRING: s;

FORMAT 
    fs := $", "$, # insert a field separator #
    #l# real repr fs := $f(#l# real repr)f(fs)$,
    nl := $l$, # insert a new line #
    #l# real item repr := $g"="f(#l# real repr)$, # e.g. "value=1.00000; " #
    #l# int item repr := $g"="f(#l# int repr)$, # e.g. "value=1; " #
    item repr := $g"="g$; # e.g. "value=1; " #

# variable & procedures for joining compound MODEs #
FORMAT sub := $"("$, sep := $","$, bus := $")"$;
STRING string sub:="(", string sep:=",", string bus:=")";

OP JOINREPR = ([]STRING s)STRING: (
    STRING out := string sub, jsep := "";
    FOR i TO UPB s DO out +:= jsep + s[i]; jsep := string sep OD;
    out + string bus
);
    
OP REPR = ([]STRING s)STRING: (
    STRING out := string sub, rsep := "";
    FOR i TO UPB s DO out +:= rsep + REPR s[i]; rsep := string sep OD;
    out + string bus
);

FORMAT hr = $68"-"l$;

MODE SLICE = FLEX[0]STRUCT(INT lwb, upb, by); # for tensor slicing #
FORMAT slice repr = $"["g(-0)":"g(-0)":"g(-0)"]"$;

MODE INTINTERVAL = STRUCT(INT lwb, upb);
MODE BOUNDS = [0]INTINTERVAL; # for tensor slicing #

PRIO WIDTH = 8;
PRIO INSIDE = 8; # TODO: define OUTSIDE #
OP INSIDE = (INT i, INTINTERVAL i interval)BOOL:
    lwb OF i interval <= i ANDF i <=  upb OF i interval;

OP WIDTH = (INTINTERVAL bound)INT: (upb OF bound - lwb OF bound + 1);
OP WIDTH = (INT dim, BOUNDS bounds)INT: (upb OF bounds[dim] - lwb OF bounds[dim] + 1);
FORMAT bounds repr = $"["g(-0)":"g(-0)"]"$;

PRIO LUB = 8;
# OP LUB: return an array of (L) and (U)pper (B)ounds #
OP LUB = ([]#L#INT x)BOUNDS: INTINTERVAL(LWB x, UPB x);
OP LUB = ([,]#L#INT x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x));
OP LUB = ([,,]#L#INT x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x),(3 LWB x, 3 UPB x));
OP LUB = ([,,,]#L#INT x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x),(3 LWB x, 3 UPB x),(4 LWB x, 4 UPB x));
OP LUB = ([]#L#REAL x)BOUNDS: INTINTERVAL(LWB x, UPB x);
OP LUB = ([,]#L#REAL x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x));
OP LUB = ([,,]#L#REAL x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x),(3 LWB x, 3 UPB x));
OP LUB = ([,,,]#L#REAL x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x),(3 LWB x, 3 UPB x),(4 LWB x, 4 UPB x));
OP LUB = ([]#L# LONG REAL x)BOUNDS: INTINTERVAL(LWB x, UPB x);
OP LUB = ([,]#L# LONG REAL x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x));
OP LUB = ([,,]#L# LONG REAL x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x),(3 LWB x, 3 UPB x));
OP LUB = ([,,,]#L# LONG REAL x)BOUNDS: BOUNDS((LWB x, UPB x),(2 LWB x, 2 UPB x),(3 LWB x, 3 UPB x),(4 LWB x, 4 UPB x));

# QQQ/ToDo ... assumes x is (effectively)rectangular matrix, base on first row #
OP LUB = ([][]#L#REAL x)BOUNDS: BOUNDS((LWB x, UPB x),(LWB x[LWB x], UPB x[LWB x]));

OP WIDTH = ([]#L#REAL x)INT: (INTINTERVAL lub = (LUB x)[1]; upb OF lub - lwb OF lub + 1);
OP WIDTH = (INT dim, [,]#L#REAL x)INT: (INTINTERVAL lub = (LUB x)[dim]; upb OF lub - lwb OF lub + 1);
OP WIDTH = ([,]#L#REAL x)INT: 1 WIDTH x;
OP WIDTH = (INT dim, [,,]#L#REAL x)INT: (INTINTERVAL lub = (LUB x)[dim]; upb OF lub - lwb OF lub + 1);
OP WIDTH = ([,,]#L#REAL x)INT: 1 WIDTH x;
OP WIDTH = (INT dim, [,,,]#L#REAL x)INT: (INTINTERVAL lub = (LUB x)[dim]; upb OF lub - lwb OF lub + 1);
OP WIDTH = ([,,,]#L#REAL x)INT: 1 WIDTH x;
OP WIDTH = ([]#L# LONG REAL x)INT: (INTINTERVAL lub = (LUB x)[1]; upb OF lub - lwb OF lub + 1);
OP WIDTH = (INT dim, [,]#L# LONG REAL x)INT: (INTINTERVAL lub = (LUB x)[dim]; upb OF lub - lwb OF lub + 1);
OP WIDTH = ([,]#L# LONG REAL x)INT: 1 WIDTH x;
OP WIDTH = (INT dim, [,,]#L# LONG REAL x)INT: (INTINTERVAL lub = (LUB x)[dim]; upb OF lub - lwb OF lub + 1);
OP WIDTH = ([,,]#L# LONG REAL x)INT: 1 WIDTH x;
OP WIDTH = (INT dim, [,,,]#L# LONG REAL x)INT: (INTINTERVAL lub = (LUB x)[dim]; upb OF lub - lwb OF lub + 1);
OP WIDTH = ([,,,]#L# LONG REAL x)INT: 1 WIDTH x;

OP MIN = ([]#L#INT array)#L#INT: (
    #L#INT min := array[LWB array];
    FOR i FROM LWB array+1 TO UPB array DO IF array[i] < min THEN min := array[i] FI OD;
    min
);

OP MAX = ([]#L#INT array)#L#INT: (
    #L#INT max := array[LWB array];
    FOR i FROM LWB array+1 TO UPB array DO IF array[i] > max THEN max := array[i] FI OD;
    max
);
    
OP MIN = ([]#L#REAL array)#L#REAL: (
    #L#REAL min := array[LWB array];
    FOR i FROM LWB array+1 TO UPB array DO IF array[i] < min THEN min := array[i] FI OD;
    min
);

OP MAX = ([]#L#REAL array)#L#REAL: (
    #L#REAL max := array[LWB array];
    FOR i FROM LWB array+1 TO UPB array DO IF array[i] > max THEN max := array[i] FI OD;
    max
);
    
# SHORT/LONG COMPL etc #

# Some base routined for generators: #
MODE
    #L#BITSYIELD=  PROC(#L#BITS)VOID,  #L#BITSGEN=  PROC(#L#BITSYIELD)VOID,
    #L#BYTESYIELD= PROC(#L#BYTES)VOID, #L#BYTESGEN= PROC(#L#BYTESYIELD)VOID,
    #L#INTYIELD=   PROC(#L#INT)VOID,   #L#INTGEN=   PROC(#L#INTYIELD)VOID,
    #L#REALYIELD=  PROC(#L#REAL)VOID,  #L#REALGEN=  PROC(#L#REALYIELD)VOID,
    #L#COMPLYIELD= PROC(#L#COMPL)VOID, #L#COMPLGEN= PROC(#L#COMPLYIELD)VOID,
    #L#STRINGYIELD=PROC(#L#STRING)VOID,#L#STRINGGEN=PROC(#L#STRINGYIELD)VOID,
    #U#CHARYIELD=  PROC(#U#CHAR)VOID,  #U#CHARGEN=  PROC(#U#CHARYIELD)VOID,
          BOOLYIELD=  PROC(   BOOL)VOID,     BOOLGEN=  PROC(   BOOLYIELD)VOID;

# Manage optionally uninitialised variables #
MODE
    #L#BITSOPT   = UNION(VOID, #L#BITS),
    #L#BYTESOPT  = UNION(VOID, #L#BYTES),
    #L#INTOPT    = UNION(VOID, #L#INT),
    #L#REALOPT   = UNION(VOID, #L#REAL),
    #L#COMPLOPT  = UNION(VOID, #L#COMPL),
    #L#STRINGOPT = UNION(VOID, #L#STRING),
    #U#CHAROPT   = UNION(VOID, #U#CHAR),
          BOOLOPT   = UNION(VOID,    BOOL);

PRIO ORELSE = 2;
# OPerator to return a "default" value if the OPTion is undefined #
OP
    ORELSE=(#L#BITSOPT   val,#L#BITS   def)BITS:  (val|(#L#BITS   out):out|def),
    ORELSE=(#L#BYTESOPT  val,#L#BYTES  def)BYTES: (val|(#L#BYTES  out):out|def),
    ORELSE=(#L#INTOPT    val,#L#INT    def)INT:   (val|(#L#INT    out):out|def),
    ORELSE=(#L#REALOPT   val,#L#REAL   def)REAL:  (val|(#L#REAL   out):out|def),
    ORELSE=(#L#COMPLOPT  val,#L#COMPL  def)COMPL: (val|(#L#COMPL  out):out|def),
    ORELSE=(#L#STRINGOPT val,#L#STRING def)STRING:(val|(#L#STRING out):out|def),
    ORELSE=(#U#CHAROPT   val,#U#CHAR   def)CHAR:  (val|(#U#CHAR   out):out|def),
    ORELSE=(   BOOLOPT   val,   BOOL   def)BOOL:  (val|(   BOOL   out):out|def);
# SHORT/LONG etc. #

OP
# OPerator to determin is an OPTion is defined #
    HASOPT = (#L#BITSOPT   val)BOOL: ( val | (#L#BITS   out): TRUE | FALSE),
    HASOPT = (#L#BYTESOPT  val)BOOL: ( val | (#L#BYTES  out): TRUE | FALSE),
    HASOPT = (#L#INTOPT    val)BOOL: ( val | (#L#INT    out): TRUE | FALSE),
    HASOPT = (#L#REALOPT   val)BOOL: ( val | (#L#REAL   out): TRUE | FALSE),
    HASOPT = (#L#COMPLOPT  val)BOOL: ( val | (#L#COMPL  out): TRUE | FALSE),
    HASOPT = (#L#STRINGOPT val)BOOL: ( val | (#L#STRING out): TRUE | FALSE),
    HASOPT = (#U#CHAROPT   val)BOOL: ( val | (#U#CHAR   out): TRUE | FALSE),
    HASOPT = (   BOOLOPT   val)BOOL: ( val | (   BOOL   out): TRUE | FALSE);
# SHORT/LONG etc. #

# Note: ℵ indicates attribute is "private", and 
                should not be used outside of this prelude #

MODE  # limited to 4 dimensions #
    REFBITSARRAY =UNION(#L#REF BITS, []#L#REF BITS, [,]#L#REF BITS, [,,]#L#REF BITS, [,,,]#L#REF BITS),
    REFINTARRAY  =UNION(#L#REF INT,  []#L#REF INT,  [,]#L#REF INT,  [,,]#L#REF INT,  [,,,]#L#REF INT),
    REFREALARRAY =UNION(#L#REF REAL, []#L#REF REAL, [,]#L#REF REAL, [,,]#L#REF REAL, [,,,]#L#REF REAL),
    REFCOMPLARRAY=UNION(#L#REF COMPL,[]#L#REF COMPL,[,]#L#REF COMPL,[,,]#L#REF COMPL,[,,,]#L#REF COMPL),
    REFCHARARRAY =UNION(#U#REF CHAR, []#U#REF CHAR, [,]#U#REF CHAR, [,,]#U#REF CHAR, [,,,]#U#REF CHAR),
    REFBOOLARRAY =UNION(   REF BOOL, []   REF BOOL, [,]   REF BOOL, [,,]   REF BOOL, [,,,]   REF BOOL);

# n.b. cannot handle STRUCTs #
MODE #ℵ#SIMPLEIN = UNION(
    REFBITSARRAY,REFINTARRAY,REFREALARRAY,REFCOMPLARRAY,REFCHARARRAY,REFBOOLARRAY
);

MODE  # limited to 4 dimensions #
    BITSARRAY =UNION(#L#BITS, []#L#BITS, [,]#L#BITS, [,,]#L#BITS, [,,,]#L#BITS),
    INTARRAY  =UNION(#L#INT,  []#L#INT,  [,]#L#INT,  [,,]#L#INT,  [,,,]#L#INT),
    REALARRAY =UNION(#L#REAL, []#L#REAL, [,]#L#REAL, [,,]#L#REAL, [,,,]#L#REAL),
    COMPLARRAY=UNION(#L#COMPL,[]#L#COMPL,[,]#L#COMPL,[,,]#L#COMPL,[,,,]#L#COMPL),
    CHARARRAY =UNION(#U#CHAR, []#U#CHAR, [,]#U#CHAR, [,,]#U#CHAR, [,,,]#U#CHAR),
    BOOLARRAY =UNION(   BOOL, []   BOOL, [,]   BOOL, [,,]   BOOL, [,,,]   BOOL);

# n.b. cannot handle STRUCTs #
MODE #ℵ#SIMPLEOUT = UNION(
    BITSARRAY, INTARRAY, REALARRAY, COMPLARRAY, CHARARRAY, BOOLARRAY
);

MODE NEWIO = PROC(REF FILE)VOID;

MODE # limited to 4 dimensions #
    #ℵ#SIMPLEOUTA = [0]SIMPLEOUT,
    #ℵ#SIMPLEOUTB = [0]UNION(SIMPLEOUT, SIMPLEOUTA),
    #ℵ#SIMPLEOUTC = [0]UNION(SIMPLEOUT, SIMPLEOUTA, SIMPLEOUTB),
    OUTMODE       = [0]UNION(SIMPLEOUT, SIMPLEOUTA, SIMPLEOUTB, SIMPLEOUTC, NEWIO),
    OUTMODEF      = [0]UNION(SIMPLEOUT, SIMPLEOUTA, SIMPLEOUTB, SIMPLEOUTC, FORMAT),

    #ℵ#SIMPLEINA = [0]SIMPLEIN,
    #ℵ#SIMPLEINB = [0]UNION(SIMPLEIN, SIMPLEINA),
    #ℵ#SIMPLEINC = [0]UNION(SIMPLEIN, SIMPLEINA, SIMPLEINB),
    INMODE       = [0]UNION(SIMPLEIN, SIMPLEINA, SIMPLEINB, SIMPLEINC, NEWIO),
    INMODEF      = [0]UNION(SIMPLEIN, SIMPLEINA, SIMPLEINB, SIMPLEINC, FORMAT);

COMMENT
PROC sget = (STRING in s, INMODE list)VOID:  fix unimplemented("sget");

PROC sgetf = (STRING in s, INMODEF list)VOID:  (
    FILE sfile; 
    STRING s := in s; 
    associate(sfile, s);
    getf(sfile,list);
    close(sfile)
);
END COMMENT

PROC type of = (OUTMODEF list)STRING: (
    STRING out := "(";
    STRING tsep := "";
    
    FOR i TO UPB list DO
        out +:= sprint(i);
        VOID(CASE list[i] IN
            (#L# FORMAT):print("#L#FORMAT"),
CO    (#L# PROC(#L#REF #L#FILE)#L#VOID):print("#L#NEWIO"), CO
            (#L# BITS  v):sprint(("#L#BITS=",v)),
            (#L# INT   v):sprint(("#L#INT=",v)),
            (#L# REAL  v):sprint(("#L#REAL=",v)),
            (#L# COMPL v):sprint(("#L#COMPL=",v)),
            (#U# CHAR  v):sprint(("#U#CHAR=",v)),
            (    BOOL  v):sprint(("BOOL=",v)),
            ([]#L# BITS  v):sprint(("[]#L#BITS=",v)),
            ([]#L# INT   v):sprint(("[]#L#INT=",v)),
            ([]#L# REAL  v):sprint(("[]#L#REAL=",v)),
            ([]#L# COMPL v):sprint(("[]#L#COMPL=",v)),
            ([]#U# CHAR  v):sprint(("[]#U#CHAR=",v)),
            ([]    BOOL  v):sprint(("[]BOOL=",v)),
            ([,]#L# BITS  v):sprint(("[,]#L#BITS=",v)),
            ([,]#L# INT   v):sprint(("[,]#L#INT=",v)),
            ([,]#L# REAL  v):sprint(("[,]#L#REAL=",v)),
            ([,]#L# COMPL v):sprint(("[,]#L#COMPL=",v)),
            ([,]#U# CHAR  v):sprint(("[,]#U#CHAR=",v)),
            ([,]    BOOL  v):sprint(("[,]BOOL=",v)),
            ([,,]#L# BITS  v):sprint(("[,,]#L#BITS=",v)),
            ([,,]#L# INT   v):sprint(("[,,]#L#INT=",v)),
            ([,,]#L# REAL  v):sprint(("[,,]#L#REAL=",v)),
            ([,,]#L# COMPL v):sprint(("[,,]#L#COMPL=",v)),
            ([,,]#U# CHAR  v):sprint(("[,,]#U#CHAR=",v)),
            ([,,]    BOOL  v):sprint(("[,,]BOOL=",v))
CO    (#L# BYTES v):print(("#L#BYTES",[]#L#CHAR(v)))CO
        OUT
            sprint("REF[]STRUCT or SHORT/LONG etc")
        ESAC);
        tsep := ","
    OD;
    out+")"
);

PROC sput = (REF STRING out, OUTMODE list)STRING: (
    FILE sfile; 
    associate(sfile, out);
    VOID(put(sfile,list));
    close(sfile);
    out
);

PROC sputf = (REF STRING out, OUTMODEF list)STRING:  (
    FILE sfile; 
    associate(sfile, out);
    CASE list[1] IN
        (FORMAT f):putf(sfile, (list[1], list[2:])) #BF#
    OUT  
        putf(sfile,list)
    ESAC;
    close(sfile);
    out
);

PROC sprint = (OUTMODE list)STRING: (
    STRING out;
    sput(out, list)# ;
    out #
);

PROC sprintf = (OUTMODEF list)STRING:  (
    STRING out;
    sputf(out, list) #;
    out #
);

SKIP # export names #
