# -*- coding: utf-8 -*- #

BEGIN # create a new scope for scal & SCAL #

MODE SCAL = #L# REAL;
SCAL small scal = #l# small real, max scal = #l# max real; 
INT scal width = #l# real width;

PROC (SCAL)SCAL 
    scal sin = #l# sin, scal cos = #l# cos, scal tan = #l# tan,
    scal arc sin = #l# arc sin, scal arc cos = #l# arc cos, scal arc tan = #l# arc tan,
    scal sinh = #l# sinh, scal cosh = #l# cosh, scal tanh = #l# tanh,
    scal arc sinh = #l# arc sinh, scal arc cosh = #l# arc cosh, scal arc tanh = #l# arc tanh,
    scal exp = #l# exp, scal ln = #l# ln, scal log = #l# log,
    scal sqrt = #l# sqrt;

FORMAT scal repr := $g(-0,scal width OVER 2)$;

# OPerators for casting fromtween long and short... note digits MAY be lost #
OP INITSCAL = (REAL r)SCAL: r;
OP INITSCAL = ([]REAL r)[]SCAL: r;
OP INITSCAL = ([,]REAL r)[,]SCAL: r;
OP INITSCAL = (LONG REAL r)SCAL: SHORTEN r;
OP INITSCAL = ([]LONG REAL r)[]SCAL:
    IF NOT fix unimplemented("SHORTEN r[]") THEN stop FI;
OP INITSCAL = ([,]LONG REAL r)[,]SCAL:
    IF NOT fix unimplemented("SHORTEN r[,]") THEN stop FI;
OP INITSCAL = (LONG LONG REAL r)SCAL: SHORTEN SHORTEN r;
OP INITSCAL = ([]LONG LONG REAL r)[]SCAL:
    IF NOT fix unimplemented("SHORTEN SHORTEN r[]") THEN stop FI;
OP INITSCAL = ([,]LONG LONG REAL r)[,]SCAL:
    IF NOT fix unimplemented("SHORTEN SHORTEN r[,]") THEN stop FI;

SKIP # export names #
